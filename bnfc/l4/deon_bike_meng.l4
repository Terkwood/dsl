/* meng's version of deon_bike.l4


template entrypoint Sale(buyer, seller, amount, item, inventory, maxDays) =
  // Some buyer orders an item for some price from a seller
  <buyer> order: Order where
    order.amount = amount &&
    order.recipient = seller &&
    order.item = item
  then (
    // The seller delivers that item
    <seller> delivery: Delivery where
      checkOffer inventory order.item order.amount &&
      delivery.item = order.item &&
      delivery.recipient = buyer &&
      // 'DateTime::addDays t d' creates a new timestamp that
      // is 'd' days after timestamp 't'.
      delivery.timestamp <= DateTime::addDays order.timestamp maxDays
    or
    // The seller tries to cheat
    <seller> delivery: Delivery where
        checkOffer inventory order.item order.amount &&
        (not (delivery.item = order.item) ||
         not (delivery.recipient = buyer))
    then failure
  )
*/

RULE mkContract
  DEFINE Buyer    ISA Person
  DEFINE Seller   ISA Person   WITH inventory = [ { amount = Money, item = Int } ]
  DEFINE Event    ISA Record   WITH time = Time
  DEFINE Message  ISA Event    WITH from = Person; to = Person
  DEFINE Delivery ISA Event    WITH from = Person; to = Person; item = Item
  DEFINE Payment  ISA Event    WITH from = Person; to = Person; amount ISA CurrencyAmount
  DEFINE Order    ISA Message  WITH amount = CurrencyAmount;    item = Item
  DEFINE wantBike ISA Order    WITH amount = :EUR:100
                                    item   = bicycle2000
  DEFINE maxDays IS 5
  DEFINE bicycle2000  ISA item     WITH name = "HotWheels 2000"
  ENTITY alice        ISA Person   WITH name = "Alice Apple"
  ENTITY bob          ISA Person   WITH name = "Bob Banana"
 DECLARE Buyer  IS alice
 DECLARE Seller IS bob WITH inventory = [ { amount >= :EUR:100, item = bicycle2000 }
                                        , { amount >= :EUR:50,  item = coldWheels  }
                                        , { amount >= :USD:200, item = popAwheelie } ]

RULE OrderBike
   PARTY Buyer
     MAY send => Order(to=seller) -- the "from" is automatic
   HENCE DeliverBike

RULE DeliverBike
    UPON recv => Order(from=buyer) -- the "to" is automatic
   PARTY Seller
    MUST send => Delivery(to=buyer, item=Order.item)
  BEFORE maxDays
    WHEN Order IN Seller.inventory
   HENCE [ inventoryDeduct & BuyerPays ]

RULE inventoryDeduct
  GIVEN DeliverBike
  DEFINE Seller.inventory.[DeliverBike.item].count = . - 1

RULE BuyerPays
   UPON recv => Delivery(from=seller, item=bikeSale.item)
  PARTY Buyer
   MUST send => Payment(to=seller, amount=bikeSale.amount)
 BEFORE maxDays

// yes, there is a risk of damage during delivery:
// if the bike was shredded in transit, what happens? the buyer doesn't pay.
// this corresponds to a UCC situation:
// https://college.cengage.com/business/goldman/business_law/7e/chapters/chapter16.html
// so we would need a "background theory" of contract law to fill in the blanks and cover more scenarios.

