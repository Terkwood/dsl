-- Program to test parser, automatically generated by BNF Converter.

module ToGraphViz where

import Control.Monad      ( when )
import Data.List (intercalate)

import Text.Pretty.Simple
import qualified Data.Text.Lazy as T
import qualified SkelL
import PrintL  ( Print, printTree )
import AbsL

-- allRuleNames
getRules :: Tops -> [Rule]
getRules (Toplevel tops) = do
  (ToplevelsRule r@(Rule rdef rname asof metalimb rulebody)) <- tops
  case rulebody of
    RuleDeem    _ _ _       -> pure r
    RModal      _ _ _       -> pure r
    RulePerform _ _ _ _ _ _ -> mempty
    RMatch mvs -> do
      (MatchVars22 innerRule) <- mvs
      pure innerRule
    RBNoop -> mempty 

showRuleName :: Rule -> [String]
showRuleName (Rule rdef rname asof metalimb RBNoop) = mempty
showRuleName (Rule rdef rname asof metalimb rulebody) = pure $ showRuleDef rdef

showRuleDef :: RuleDef -> String
showRuleDef (RID      oa) = showOA oa
showRuleDef (RNumID i oa) = showOA oa
showRuleDef (RNum   i)    = "rule " ++ show i

showOA :: ObjAttr -> String
showOA (OA_dots oaes) = intercalate "." (showOAE <$> oaes)

showOAE :: ObjAttrElem -> String
showOAE (ObjAttrElemIdent  ( Ident x)) = x
showOAE (ObjAttrElemUIdent (UIdent x)) = x

-- all rules naming another rule in HENCE, LEST, or GIVEN segments
-- allDeonticNodes = _

